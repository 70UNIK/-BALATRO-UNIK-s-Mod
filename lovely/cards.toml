[manifest]
version = "0.0.1"
dump_lua = true
priority = 999

### Make impounded sellable
# Patch into cryptid to force happiness to be positive in a reliable way
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/spooky.lua"]'''
pattern = '''and card.ability.name ~= "cry-Monopoly"'''
position = "after"
payload = '''and card.config.center.key ~= "j_unik_impounded" 
and card.config.center.key ~= "j_unik_rancid_smoothie"'''
match_indent = true

### allow modify cost of impounded
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = 'if self.area and self.ability.couponed and (self.area == G.shop_jokers or self.area == G.shop_booster) then self.cost = 0 end'
position = 'after'
match_indent = true
payload = '''
if self.config.center.key == 'j_unik_impounded' and self.added_to_deck then
    self.sell_cost = self.ability.extra.cost + (self.ability.extra_value or 0)
end
'''

### do not set impounded cost to 0
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/spooky.lua"]'''
pattern = '''if self.config and self.config.center and self.config.center.rarity == "cry_cursed" then'''
position = "at"
payload = '''if self.config and self.config.center and (self.config.center.rarity == "cry_cursed" or self.ability.unik_disposable or self.ability.unik_niko) and self.config.center.key ~= "j_unik_impounded" then'''
match_indent = true

### do not set impounded cost to 0
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/overrides.lua"]'''
pattern = '''if self.config and self.config.center and self.config.center.rarity == "cry_cursed" then'''
position = "at"
payload = '''if self.config and self.config.center and (self.config.center.rarity == "cry_cursed" or self.ability.unik_disposable or self.ability.unik_niko) and self.config.center.key ~= "j_unik_impounded" then'''
match_indent = true

### Hook n discard, ensure cards are discarded BEFORE scoring (similar to the hook)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if G.GAME.blind:press_play() then'''
position = 'before'
match_indent = true
payload = '''
if G.jokers then
    for _, v in pairs(G.jokers.cards) do
        if v.ability.name == "j_unik_hook_n_discard" then
            --taken from the hook
            G.E_MANAGER:add_event(Event({ 
                trigger = 'after',
                func = function()
                local any_selected = nil
                local _cards = {}
                for k, v in ipairs(G.hand.cards) do
                    _cards[#_cards+1] = v
                end
                for i = 1, 2 do
                    if G.hand.cards[i] then 
                        local selected_card, card_key = pseudorandom_element(_cards, pseudoseed('hook'))
                        G.hand:add_to_highlighted(selected_card, true)
                        table.remove(_cards, card_key)
                        any_selected = true
                        play_sound('card1', 1)
                    end
                end
                if any_selected then G.FUNCS.discard_cards_from_highlighted(nil, true) end
                if any_selected then
                    v:juice_up(0.8, 0.8)
                end
            return true end })) 
            card_eval_status_text(v, "extra", nil, nil, nil, {
                message = localize("k_unik_hooked"),
                colour = G.C.UNIK_THE_HOOK,
                card=v,
            })
        end
    end
end
'''

### cube content set: add cube and big cube to the cube sets (cannot do it manually, have to patch it in)

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/misc_joker.lua"]'''
pattern = '''local big_cube = {'''
position = "after"
payload = '''pools = { ["unik_cube"] = true },'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/misc_joker.lua"]'''
pattern = '''pools = { ["Meme"] = true },
	source_gate = "sho",
	loc_vars = function(self, info_queue, center)
		return { vars = { center.ability.extra.chips } }
	end,'''
position = "at"
payload = '''pools = { ["unik_cube"] = true, ["Meme"] = true,  },
	source_gate = "sho",
	loc_vars = function(self, info_queue, center)
		return { vars = { center.ability.extra.chips } }
	end,'''
match_indent = true

### Perma Xchip fix for maya


