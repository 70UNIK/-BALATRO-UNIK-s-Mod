[manifest]
version = "0.0.1"
dump_lua = true
priority = 999

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/enhanced.lua"]'''
pattern = '''polychrome = { atlas = "cry_atlaseditiondeck", pos = { x = 2, y = 0 } },'''
position = "after"
payload = '''
unik_positive = { atlas = "unik_edition_deck", pos = { x = 0, y = 0 } },
unik_bloated = { atlas = "unik_edition_deck", pos = { x = 1, y = 0 } },
unik_halfjoker = { atlas = "unik_edition_deck", pos = { x = 2, y = 0 } },
unik_fuzzy = { atlas = "unik_edition_deck", pos = { x = 0, y = 1 } },
unik_corrupted = { atlas = "unik_edition_deck", pos = { x = 1, y = 1 } },
unik_steel = { atlas = "unik_edition_deck", pos = { x = 2, y = 1 } },
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/enhanced.lua"]'''
pattern = '''cry_flickering = { atlas = "cry_atlasdeck", pos = { x = 6, y = 2 } },'''
position = "after"
payload = '''
unik_depleted = { atlas = "unik_sticker_deck", pos = { x = 0, y = 0 } },
unik_disposable = { atlas = "unik_sticker_deck", pos = { x = 1, y = 0 } },
unik_niko = { atlas = "unik_sticker_deck", pos = { x = 2, y = 0 } },
unik_impounded = { atlas = "unik_sticker_deck", pos = { x = 0, y = 1 } },'''
match_indent = true

## Betmma real time shader method
# Send real time to fs file in draw_shader function.
[[patches]]
[patches.pattern]
target = "engine/sprite.lua"
pattern = '''G.SHADERS[_shader or 'dissolve']:send("shadow",(not not _shadow_height))'''
position = "after"
payload = '''
if _shader=='unik_corrupted' then
    G.SHADERS[_shader or 'dissolve']:send("real_time",G.TIMERS.REAL - (G.vortex_time or 0))
end
if _shader=='unik_fuzzy' then
    G.SHADERS[_shader or 'dissolve']:send("real_time",G.TIMERS.REAL - (G.vortex_time or 0))
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/card_draw.lua"]'''
pattern = '''if self.edition then'''
position = "before"
payload = '''
end
'''
match_indent = true
##Half edition: Do not draw the base floating soul sprite if an edition is applied and apply_to_float is true
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/card_draw.lua"]'''
pattern = '''if type(self.config.center.soul_pos.draw) == 'function' then'''
position = "before"
payload = '''
local edition_soul_sprite = false
if self.edition then 
    for k, v in pairs(G.P_CENTER_POOLS.Edition) do
        if v.apply_to_float and v.apply_to_float == true and self.edition[v.key:sub(3)] then
            edition_soul_sprite = true
        end
    end
end
if edition_soul_sprite == false then
'''
match_indent = true

### Prevent delay when applying a lot of editions at once.

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/overrides.lua"]'''
pattern = '''if self.edition and not silent then
		local ed = G.P_CENTERS['e_' .. (self.edition.type)]
		G.CONTROLLER.locks.edition = true
		G.E_MANAGER:add_event(Event({
			trigger = 'after',
			delay = not immediate and 0.2 or 0,
			blockable = not immediate,
			func = function()
				if self.edition then
					self:juice_up(1, 0.5)
					play_sound(ed.sound.sound, ed.sound.per, ed.sound.vol)
				end
				return true
			end
		}))
		G.E_MANAGER:add_event(Event({
			trigger = 'after',
			delay = 0.1,
			func = function()
				G.CONTROLLER.locks.edition = false
				return true
			end
		}))
	end'''
position = "at"
payload = '''
if self.edition and not silent and not G.GAME.force_bypass_edition_delay then
    local ed = G.P_CENTERS['e_' .. (self.edition.type)]
    G.CONTROLLER.locks.edition = true
    G.E_MANAGER:add_event(Event({
        trigger = 'after',
        delay = not immediate and 0.2 or 0,
        blockable = not immediate,
        func = function()
            if self.edition then
                self:juice_up(1, 0.5)
                play_sound(ed.sound.sound, ed.sound.per, ed.sound.vol)
            end
            return true
        end
    }))
    G.E_MANAGER:add_event(Event({
        trigger = 'after',
        delay = 0.1,
        func = function()
            G.CONTROLLER.locks.edition = false
            return true
        end
    }))
elseif self.edition and not silent and G.GAME.force_bypass_edition_delay  then
    
    local ed = G.P_CENTERS['e_' .. (self.edition.type)]
    if self.edition then
        self:juice_up(1, 0.5)
        play_sound(ed.sound.sound, ed.sound.per, ed.sound.vol)
    end

end
'''
match_indent = true