[manifest]
version = "0.0.1"
dump_lua = true
priority = 999
### disposable/niko/bloated functionality
## stolen from cryptid code:

# initiate variables
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "rental_rate = 3,"
position = "after"
payload = '''
unik_consumeable_niko_death_odds = 3,
unik_goalpost_ante_win_increase = 0,
unik_scores_really_big = 0,
unik_vice_squeeze = 1, -- 1: normal, 2: halved, 4, 8
unik_force_epic_plus = 0,
unik_old_force_epic_plus = 4,
unik_reed_ranks = {{rank = "Ace", id = 14},{rank = "7", id = 7},{rank = "10", id = 10}},
epic_cookie_click_interval = -1, -- -1 = disabled.
ante_rerolls = 0,
global_rerolls = 0,
unik_spades = 0,
unik_hearts = 0,
unik_diamonds = 0,
unik_clubs = 0,
unik_face_cards = 0,
unik_ranks_scored_this_ante = {},
'''
match_indent = true

# Patch Lock to include disposable and depleted stickers
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/spectral.lua"]'''
pattern = '''SMODS.Stickers.cry_flickering:apply(CARD, nil)'''
position = "before"
payload = '''
CARD.ability.unik_depleted = nil
CARD.ability.unik_triggering = nil
CARD.ability.unik_disposable = nil
'''
match_indent = true

# Yellow Stake - perishable and rental effects on consumable
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if game_over then"
position = "before"
payload = '''
local i = 1
while i <= #G.jokers.cards do
    local gone = G.jokers.cards[i]:calculate_disposable()
    if not gone then i = i + 1 end
end
i = 1
while i <= #G.consumeables.cards do
    local gone = G.consumeables.cards[i]:calculate_disposable()
    if not gone then i = i + 1 end
end
'''
match_indent = true

# Yellow Stake - perishable and rental effects on cards in deck and discard pile
# Double Down
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.FUNCS.draw_from_hand_to_discard()"
position = "before"
payload = '''
i = 1
while i <= #G.hand.cards do
    local gone = G.hand.cards[i]:calculate_disposable()
    if not gone then i = i + 1 end
end
i = 1
while i <= #G.deck.cards do
    local gone = G.deck.cards[i]:calculate_disposable()
    if not gone then i = i + 1 end
end
i = 1
while i <= #G.discard.cards do
    local gone = G.discard.cards[i]:calculate_disposable()
    if not gone then i = i + 1 end
end
'''
match_indent = true

# 1 in 2 chance to self destruct on use
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local used_tarot = copier or self"
position = "after"
payload = '''
local gone = false
if self.ability.unik_disposable or self.ability.unik_niko then
    if not self.ability.unik_disposed then
        if SMODS.pseudorandom_probability(self, 'unik_niko_consumable', 2, G.GAME.unik_consumeable_niko_death_odds, 'unik_niko_consumable') then
	    local gone = true
            self.ability.extinct = true
            G.E_MANAGER:add_event(Event({
                func = function()
                    play_sound('tarot1')
                    self.T.r = -0.2
                    self:juice_up(0.3, 0.4)
                    self.states.drag.is = true
                    self.children.center.pinch.x = true
                    G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.3, blockable = false,
                        func = function()
                                if self.area then self.area:remove_card(self) end
                                self:remove()
                                self = nil
                            return true; end}))
                    return true
                end
            }))
            if self.ability.unik_niko then
                card_eval_status_text(self, "jokers", nil, nil, nil, {
                    message = localize("k_unik_you_killed_niko"),
                    delay = 0.1 ,
                    colour = G.C.RED,
               })               
            else
                card_eval_status_text(self, "jokers", nil, nil, nil, {
                    message = localize("k_unik_disposed"),
                    delay = 0.1 ,
                    colour = G.C.RED,
               })
            end
            return true
        end
    end
elseif self.edition and self.edition.unik_bloated then
    if self.ability and not self.ability.will_pop then
        if SMODS.pseudorandom_probability(self, 'unik_bloated_edition', 1, 3, 'unik_bloated_edition') then
            local gone = true
            self.ability.extinct = true
            G.E_MANAGER:add_event(Event({
                func = function()
                    self:bloated_pop()
                    G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.3, blockable = false,
                        func = function()
                            if self.area then self.area:remove_card(self) end
                            
                            self = nil
                    return true; end}))
                    return true
                end
            }))
            return true
        end
    end
end
'''
match_indent = true

### Patch to also factor in extincting cards

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/overrides.lua"]'''
pattern = "if not card.shattered and not card.destroyed then"
position = "at"
payload = '''
if not card.shattered and not card.destroyed and not card.removed and not card.REMOVED then
'''
match_indent = true
