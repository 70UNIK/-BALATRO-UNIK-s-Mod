[manifest]
version = "0.0.1"
dump_lua = true
priority = 9999

### legendary nuke - Trigger player death - AFTER cryptid
### Also includes green goalpost functionality;

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.blind.in_blind = false'''
position = 'before'
payload = '''--legendary nuke will set chips and mult to 0 if exceeding 3x requirements before causing an instant game over.
--If you have panopicon, it disables this part of the violent vessel
local cry_panopicon = false
if G.jokers then
        if G.jokers.cards then
            for _, v in pairs(G.jokers.cards) do
                if v.config.center.key == "j_cry_panopticon" and not v.debuff then
                    cry_panopicon = true
                end
            end
        end
    end
if ((G.GAME.blind and G.GAME.unik_nuke_activate) or (G.GAME.blind and G.GAME.unik_kill_player_before_last_hand and G.GAME.current_round.hands_left > 0 and not cry_panopicon)) and not (G.GAME.blind.disabled)then
    local upper = G.GAME.chips
    local ceiling = G.GAME.blind.chips^1.666
    if to_big(upper) > to_big(ceiling) or G.GAME.unik_kill_player_before_last_hand then
        G.GAME.chips = 0
        game_over = true
        local text = localize('k_unik_nuked')
        ease_colour(G.C.UI_CHIPS, {0.0, 0.0, 0.0, 666666})
        ease_colour(G.C.UI_MULT, {0.0, 0.0, 0.0, 666666})
        G.ROOM.jiggle = G.ROOM.jiggle + 25
        attention_text({
            scale = 1.4, text = text, hold = 2, align = 'cm', offset = {x = 0,y = -2.7},major = G.play
        })
        G.GAME.blind.triggered = true
        G.GAME.blind:wiggle()
        if G.GAME.unik_kill_player_before_last_hand then
            G.GAME.unik_killed_by_legendary_vessel = true
        else
            G.GAME.unik_killed_by_nuke_legendary = true
        end
        
    end
end
-- Green goalpost: 
if G.GAME.blind and G.GAME.unik_moving_the_goalposts and not (G.GAME.blind.disabled) then
    G.GAME.win_ante = G.GAME.win_ante + 3
    --increase by 2 then later decrease by amount if victory.
    G.GAME.unik_goalpost_ante_win_increase = G.GAME.unik_goalpost_ante_win_increase + 3
    G.GAME.unik_moving_the_goalposts = nil
    G.GAME.blind.triggered = true
    G.GAME.blind:wiggle()
    G.ROOM.jiggle = G.ROOM.jiggle + 3
end
-- The Vice: Halve interval of blind = 
if G.GAME.blind and G.GAME.unik_vice_enabled and not (G.GAME.blind.disabled) then
    G.GAME.unik_vice_squeeze = G.GAME.unik_vice_squeeze * 2
    G.GAME.blind.triggered = true
    G.GAME.blind:wiggle()
    G.ROOM.jiggle = G.ROOM.jiggle + 3
    local text = localize('k_unik_viced')
    attention_text({
        scale = 0.8, text = text, hold = 2, align = 'cm', offset = {x = 0,y = -2.7},major = G.play
    })
end
-- scores really big for regular indigo icbm. Can only spawn if you scored over ^1.5 reqs consecutively
local upper22 = G.GAME.chips
local ceiling22 = G.GAME.blind.chips^2
--print(upper22)
--print(ceiling22)
if to_big(upper22) > to_big(ceiling22) then
     G.GAME.unik_scores_really_big = G.GAME.unik_scores_really_big + 1
else
    G.GAME.unik_scores_really_big = 0
end
--print(G.GAME.unik_scores_really_big)
'''
match_indent = true

### Green goalpost: reset ante victory reqs after victory:
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.win_notified = true'''
position = 'before'
payload = '''
    G.GAME.win_ante = G.GAME.win_ante - G.GAME.unik_goalpost_ante_win_increase
    G.GAME.unik_goalpost_ante_win_increase = 0
'''
match_indent = true
### Custom boss blind death messages

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''Jimbo:add_speech_bubble('lq_'..math.random(1,10), nil, {quip = true})'''
position = 'at'
payload = '''
if G.GAME.blind and G.GAME.blind.death_message and not G.GAME.blind.disabled then
    Jimbo:add_speech_bubble(G.GAME.blind.death_message, nil, {quip = true})
elseif G.GAME.unik_killed_by_nuke_legendary then
    Jimbo:add_speech_bubble('special_lose_unik_nuke_legendary', nil, {quip = true})
    G.GAME.unik_killed_by_nuke_legendary = nil
    G.GAME.unik_nuke_activate = nil
elseif G.GAME.unik_killed_by_legendary_vessel then
    Jimbo:add_speech_bubble('special_lose_unik_vessel_legendary', nil, {quip = true})
    G.GAME.unik_killed_by_legendary_vessel = nil
elseif G.GAME.unik_killed_by_pentagram then
    Jimbo:add_speech_bubble('special_lose_unik_killed_by_pentagram', nil, {quip = true})
    G.GAME.unik_killed_by_pentagram = nil
    G.GAME.unik_pentagram_manager_fix = nil
elseif G.GAME.unik_killed_by_placard then
    Jimbo:add_speech_bubble('special_lose_unik_killed_by_placard', nil, {quip = true})
    G.GAME.unik_killed_by_placard = nil
elseif G.GAME.unik_killed_by_joyless then
    Jimbo:add_speech_bubble('special_lose_unik_jollyless', nil, {quip = true})
    G.GAME.unik_killed_by_joyless = nil
elseif G.GAME.unik_eaten_by_lily then
    Jimbo:add_speech_bubble('special_lose_unik_sprunki_lily', nil, {quip = true})
    G.GAME.unik_eaten_by_lily = nil
elseif G.GAME.unik_killed_by_poppy then
    Jimbo:add_speech_bubble('special_lose_unik_tall_poppy_syndrome', nil, {quip = true})
    G.GAME.unik_killed_by_poppy = nil
    G.GAME.unik_poppy_ceil = nil
elseif G.GAME.unik_killed_by_boo then
    Jimbo:add_speech_bubble('special_lose_unik_bigger_boo', nil, {quip = true})
    G.GAME.unik_killed_by_boo = nil
    G.GAME.unik_pentagram_manager_fix = nil
elseif G.GAME.unik_killed_by_leak then
    Jimbo:add_speech_bubble('special_lose_unik_the_leak', nil, {quip = true})
    G.GAME.unik_killed_by_leak = nil
elseif G.GAME.unik_killed_by_artisan_builds then
    Jimbo:add_speech_bubble('special_lose_unik_artisan_builds', nil, {quip = true})
    G.GAME.unik_killed_by_artisan_builds = nil
elseif G.GAME.unik_killed_by_magnet then
    Jimbo:add_speech_bubble('special_lose_unik_magnet', nil, {quip = true})
    G.GAME.unik_killed_by_magnet = nil
    G.GAME.unik_deathly_debuff_text = nil
elseif G.GAME.unik_killed_by_racket then
    Jimbo:add_speech_bubble('special_lose_unik_racket', nil, {quip = true})
    G.GAME.unik_killed_by_racket = nil
elseif G.GAME.unik_killed_by_video_poker then
    Jimbo:add_speech_bubble('special_lose_unik_video_poker', nil, {quip = true})
    G.GAME.unik_killed_by_video_poker = nil
    G.GAME.unik_video_poker_rules = nil
elseif G.GAME.unik_killed_by_magnet_legendary then
    Jimbo:add_speech_bubble('special_lose_unik_magnet_legendary', nil, {quip = true})
    G.GAME.unik_killed_by_magnet_legendary = nil
        G.GAME.unik_pentagram_manager_fix = nil
         G.GAME.unik_deathly_debuff_text = nil
elseif G.GAME.unik_killed_by_sword_legendary then
    Jimbo:add_speech_bubble('special_lose_unik_sword_legendary', nil, {quip = true})
    G.GAME.unik_killed_by_sword_legendary = nil
elseif G.GAME.unik_killed_by_tornado_legendary then
    Jimbo:add_speech_bubble('special_lose_unik_tornado_legendary', nil, {quip = true})
    G.GAME.unik_killed_by_tornado_legendary = nil
    G.GAME.unik_deathly_debuff_text = nil
elseif G.GAME.unik_killed_by_rot then
    Jimbo:add_speech_bubble('special_lose_unik_red_rot', nil, {quip = true})
    G.GAME.unik_killed_by_rot = nil
        G.GAME.unik_pentagram_manager_fix = nil
elseif G.GAME.unik_killed_by_bigger_blind then
    Jimbo:add_speech_bubble('special_lose_bigger_blind', nil, {quip = true})
    G.GAME.unik_killed_by_bigger_blind = nil
elseif G.GAME.unik_killed_by_artisan_builds_epic then
    Jimbo:add_speech_bubble('special_lose_unik_artisan_builds_epic', nil, {quip = true})
    G.GAME.unik_killed_by_artisan_builds = nil
else
    Jimbo:add_speech_bubble('lq_'..math.random(1,10), nil, {quip = true})
    G.GAME.unik_deathly_debuff_text = nil
end
G.GAME.unik_prevent_killing_cursed_jokers2 = nil
G.GAME.unik_deathly_debuff_text = nil
'''
match_indent = true

### Set blind sizes to be different if jen is installed; legendary blinds
