[manifest]
version = "0.0.1"
dump_lua = true
priority = 999

# Register banned jokers for Common Muck
# Also initializes disabled/enabled cards
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "set_profile_progress()"
position = "before"
payload = '''
-- adding banned jokers for common muck
for i = 1, #G.CHALLENGES do
    if G.CHALLENGES[i].id == 'c_unik_common_muck' and #G.CHALLENGES[i].restrictions.banned_cards <= 2 then
        for k, v in pairs(G.P_CENTERS) do
            -- Check if its a joker
            --also nil check to avoid registring banned jokers (almanac)
            if v.set == "Joker" and v ~= nil then
                --check if its not a common (cursed jokers will still appear, cause Bigger Boo and Purple Pentagram)
                if v.rarity ~= 1 and v.rarity ~= UnikDetrimentalRarity() then
                    G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = k}
                end
            end
        end
        -- Add THE SOUL, wraith, summoning and Gateway to the banned cards
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'c_soul'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'c_wraith'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'c_cry_gateway'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'c_cry_summoning'}
    end

    --Adding banned planets and jokers for singleton
    if G.CHALLENGES[i].id == 'c_unik_singleton' and #G.CHALLENGES[i].restrictions.banned_cards <= 5 then

        for k, v in pairs(G.P_CENTERS) do
            -- Check if its a joker
            --also nil check to avoid registring banned jokers (almanac)
            if v.set == "Joker" and v ~= nil then
                --ban all but high card and none type jokers
                if k ~= 'j_cry_giggly' and k ~= 'j_cry_dubious' and k ~= 'j_cry_undefined' and k ~= 'j_cry_nebulous' then
                    if G.P_CENTERS[k].effect and (G.P_CENTERS[k].effect == "Cry Type Mult" or G.P_CENTERS[k].effect == "Cry Type Chips") then
                        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = k}
                    end
                end
            end
            if v.set == "Planet" and v ~= nil then
                if k ~= 'c_pluto' and k ~= 'c_cry_nibiru' and k ~= 'c_cry_Timantti' and k ~= 'c_cry_ruutu' and k ~= 'c_cry_voxel' then
                    G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = k}
                end
            end
        end

        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_cry_biggestm'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_cry_effarcire'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_cry_huntingseason'}

        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_jolly'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_zany'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_mad'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_crazy'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_droll'}

        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_sly'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_wily'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_clever'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_devious'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_crafty'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_trousers'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_square'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_unik_cube_joker'}

        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_duo'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_trio'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_family'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_order'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_tribe'}

        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_cry_duos'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_cry_nuts'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_cry_quintet'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_cry_unity'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_cry_swarm'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_cry_stronghold'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_cry_wtf'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_cry_clash'}
        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'j_cry_annihalation'}

        G.CHALLENGES[i].restrictions.banned_cards[#G.CHALLENGES[i].restrictions.banned_cards+1] = {id = 'c_death'}

    end
end
'''
match_indent = true

# Force shop to only spawn common jokers
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "local card = create_card(v.type, area, nil, nil, nil, nil, nil, 'sho')"
position = "at"
payload = '''
local card
if v.type == 'Joker' and G.GAME.modifiers.unik_common_only then
    --print("COMMON ONLY!")
    card = create_card(v.type, area, nil, 0, nil, nil, nil, 'sho')
else
    card = create_card(v.type, area, nil, nil, nil, nil, nil, 'sho')
end
'''
match_indent = true

# Force buffoon pack to only spawn common jokers
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''card = create_card("Joker", G.pack_cards, nil, nil, true, true, nil, 'buf')'''
position = "at"
payload = '''
if G.GAME.modifiers.unik_common_only then
    --print("COMMON ONLY!")
    card = create_card("Joker", G.pack_cards, nil, 0, true, true, nil, 'buf')
else
    card = create_card("Joker", G.pack_cards, nil, nil, true, true, nil, 'buf')
end
'''
match_indent = true

# Register banned bosses for video poker
# Also initializes disabled/enabled cards
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "set_profile_progress()"
position = "before"
payload = '''
for i = 1, #G.CHALLENGES do
    if (G.CHALLENGES[i].id == 'c_unik_video_poker_1' or G.CHALLENGES[i].id == 'c_unik_video_poker_2' or G.CHALLENGES[i].id == 'c_unik_video_poker_3') and #G.CHALLENGES[i].restrictions.banned_other == 0 then
        for k, v in pairs(G.P_BLINDS) do
            if k ~= "bl_unik_video_poker" and v.boss then
                G.CHALLENGES[i].restrictions.banned_other[#G.CHALLENGES[i].restrictions.banned_other+1] = {id = k, type = 'blind'}
            end
        end
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "delay(0.5)"
position = "before"
payload = '''
if not saveTable and G.GAME.modifiers.unik_single_select_limit then
    G.E_MANAGER:add_event(Event({
        trigger = "after",
        delay = 0.7,
        func = function()
            SMODS.change_play_limit(1 - G.GAME.starting_params.play_limit)
            SMODS.change_discard_limit(1 - G.GAME.starting_params.discard_limit)
            G.hand.config.highlighted_limit = 1
            return true
        end,
    }))
    
end
'''
match_indent = true
