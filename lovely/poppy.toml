[manifest]
version = "0.0.1"
dump_lua = true
priority = 9999

### THE Poppy: disallow hands exceeding 3x blind size

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''check_and_set_high_score('hand', hand_chips*mult)'''
position = 'before'
payload = '''if (to_big(hand_chips*mult) > to_big(G.GAME.blind.chips * 2) and (G.GAME.blind and (G.GAME.blind.config.blind.key == "bl_unik_the_poppy")) and not (G.GAME.blind.disabled)) then
--print("TESTING THE POPPY_1")
            
            local supposedHands = hand_chips
            local supposedMult = mult
            hand_chips = 0
            mult = 0
            G.E_MANAGER:add_event(Event({
                trigger = 'after',delay = 0.4,
                func = function()
                    --print("TESTING THE POPPY2")
                    hand_chips = 0
                    mult = 0
                    G.GAME.blind.triggered = true
                    G.GAME.blind:wiggle()
                    play_area_status_text("Not Allowed!")
                    return true
                end   
            }))
        end
'''
match_indent = true

### display the fake score before not allowing the hand
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''        func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = G.GAME.blind.cry_cap_score and G.GAME.blind:cry_cap_score(math.floor(hand_chips*mult)) or math.floor(hand_chips*mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)
      }))'''
position = 'after'
payload = '''
if (to_big(hand_chips*mult) > to_big(G.GAME.blind.chips * 2) and (G.GAME.blind and (G.GAME.blind.config.blind.key == "bl_unik_the_poppy")) and not (G.GAME.blind.disabled)) then
            --print("TESTING THE POPPY4")
            local supposedHands = hand_chips
            local supposedMult = mult
            G.E_MANAGER:add_event(Event({
                trigger = 'after',delay = 0.4,
                func = function()
                    --print("TESTING THE POPPY3")
                    update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = math.floor(supposedHands*supposedMult), level = '', handname = ''})
                    return true
                end   
            }))
        end
'''
match_indent = true