[manifest]
version = "0.0.1"
dump_lua = true
priority = 999

# Patch into cryptid to force happiness to be positive in a reliable way
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/overrides.lua"]'''
pattern = '''if card.ability.name == "cry-universe" then
		card:set_edition("e_cry_astral", true, nil, true)
	end'''
position = "after"
payload = '''
if card.ability.name == "j_unik_happiness" then
    card:set_edition("e_unik_positive", true, nil, true)
end
if card.ability.name == "j_unik_borg_cube" then
    card:set_edition("e_unik_steel", true, nil, true)
end
if card.ability.name == "j_unik_binary_asteroid" then
    card:set_edition("e_paperback_dichrome", true, nil, true)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/overrides.lua"]'''
pattern = '''and card.ability.name ~= "cry-universe"'''
position = "after"
payload = '''and card.ability.name ~= "j_unik_happiness"
and card.ability.name ~= "j_unik_borg_cube"
and card.ability.name ~= "j_unik_binary_asteroid"
'''
match_indent = true

### Bad edition colors: Instead of a blueshift, its a redshift, just to show how shitty it is

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.C.DARK_EDITION[2] = math.min(self.C.DARK_EDITION[3], self.C.DARK_EDITION[1])"
position = "after"
payload = """--self.C.UNIK_SHITTY_EDITION[3] = 0.6+0.2*math.sin(self.TIMERS.REAL*1.3)
        self.C.UNIK_SHITTY_EDITION[1] = 0.6+0.2*(1- math.sin(self.TIMERS.REAL*1.3))
        --self.C.UNIK_SHITTY_EDITION[4] = 0.6-0.2*(1- math.sin(self.TIMERS.REAL*1.3))
        self.C.UNIK_SHITTY_EDITION[2] = math.min(self.C.DARK_EDITION[1], self.C.DARK_EDITION[2])"""
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.C.DARK_EDITION[2] = math.min(self.C.DARK_EDITION[3], self.C.DARK_EDITION[1])"
position = "after"
payload = """--self.C.UNIK_SYNC_CATALYST_FAIL[1] = 0.6+0.2*math.sin(self.TIMERS.REAL*1.3)
        self.C.UNIK_SYNC_CATALYST_FAIL[3] = 0.6+0.2*(1- math.sin(self.TIMERS.REAL*1.3))
        self.C.UNIK_SYNC_CATALYST_FAIL[2] = math.min(self.C.UNIK_SYNC_CATALYST_FAIL[1], self.C.UNIK_SYNC_CATALYST_FAIL[3])
        
        self.C.UNIK_LARTCEPS1[1] = 0.5+0.6*(1- math.sin(self.TIMERS.REAL*5))
        self.C.UNIK_LARTCEPS1[2] = 0.5+0.6*math.sin(self.TIMERS.REAL*5)
        self.C.UNIK_LARTCEPS1[3] = 0.5+0.6*math.sin(self.TIMERS.REAL*5)

        self.C.UNIK_LARTCEPS_INVERSE[1] = 0.5+0.6*math.sin(self.TIMERS.REAL*5)
        self.C.UNIK_LARTCEPS_INVERSE[2] = 0.5+0.6*(1- math.sin(self.TIMERS.REAL*5))
        self.C.UNIK_LARTCEPS_INVERSE[3] = 0.5+0.6*(1- math.sin(self.TIMERS.REAL*5))
        self.C.SECONDARY_SET.unik_lartceps = self.C.UNIK_LARTCEPS1
        self.C.RARITY["unik_legendary_blind"] = self.C.UNIK_RGB
"""
match_indent = true


[[patches]]
[patches.pattern]
target = "globals.lua"
pattern = "DARK_EDITION = {0,0,0,1},"
position = "after"
payload = """UNIK_SHITTY_EDITION = {0,0,0,1},
UNIK_LARTCEPS1 = {1,0,0,1},
UNIK_RGB = {0,0,0,1},
UNIK_RGB_HUE = 0,
UNIK_LARTCEPS_INVERSE = {1,0,0,1},
UNIK_THE_PLANT = HEX('709284'),
UNIK_THE_MANACLE = HEX('575757'),
UNIK_THE_WALL = HEX('8a59a5'),
UNIK_THE_GOAD = HEX('b95c96'),
UNIK_THE_WINDOW = HEX('a9a295'),
UNIK_THE_CLUB = HEX('b9cb92'),
UNIK_THE_HEAD = HEX('ac9db4'),
UNIK_THE_ARM = HEX('6865f3'),
UNIK_THE_HOOK = HEX('a84024'),
UNIK_ORTA_THE_HAMMER = HEX('6a3847'),
UNIK_MAYA = HEX('ff00ab'),
UNIK_YOKANA = HEX('86cafe'),
UNIK_CHELSEA = HEX('d298fd'),
UNIK_EYE_SEARING_BLUE = HEX('0000ff'),
UNIK_SYNC_CATALYST_FAIL = {0,0,0,1},
UNIK_VOID_COLOR = HEX('000000'),
UNIK_EYE_SEARING_RED= HEX('ff0000'),
UNIK_UNIK = HEX('fe90ff'),
UNIK_CAPTION = HEX('009A9A'),
"""
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "dark_edition = G.C.DARK_EDITION,"
position = "after"
payload = """unik_shitty_edition = G.C.UNIK_SHITTY_EDITION,
unik_plant_color = G.C.UNIK_THE_PLANT,
unik_manacle_color = G.C.UNIK_THE_MANACLE,
unik_wall_color = G.C.UNIK_THE_WALL,
unik_goad_color = G.C.UNIK_THE_GOAD,
unik_window_color = G.C.UNIK_THE_WINDOW,
unik_club_color = G.C.UNIK_THE_CLUB,
unik_head_color = G.C.UNIK_THE_HEAD,
unik_arm_color = G.C.UNIK_THE_ARM,
unik_hook_color = G.C.UNIK_THE_HOOK,
unik_orta_hammer_color = G.C.UNIK_ORTA_THE_HAMMER,
unik_eye_searing_blue = G.C.UNIK_EYE_SEARING_BLUE,
unik_eye_searing_red = G.C.UNIK_EYE_SEARING_RED,
unik_void_color = G.C.UNIK_VOID_COLOR,
unik_maya_color = G.C.UNIK_MAYA,
unik_yokana_color = G.C.UNIK_YOKANA,
unik_chelsea_color = G.C.UNIK_CHELSEA,
unik_unik_color = G.C.UNIK_UNIK,
unik_caption = G.C.UNIK_CAPTION,
unik_lartceps1 = G.C.UNIK_LARTCEPS1,
unik_lartceps_inverse = G.C.UNIK_LARTCEPS_INVERSE,
"""
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/enhanced.lua"]'''
pattern = '''polychrome = { atlas = "cry_atlaseditiondeck", pos = { x = 2, y = 0 } },'''
position = "after"
payload = '''
unik_positive = { atlas = "unik_edition_deck", pos = { x = 0, y = 0 } },
unik_bloated = { atlas = "unik_edition_deck", pos = { x = 1, y = 0 } },
unik_halfjoker = { atlas = "unik_edition_deck", pos = { x = 2, y = 0 } },
unik_fuzzy = { atlas = "unik_edition_deck", pos = { x = 0, y = 1 } },
unik_corrupted = { atlas = "unik_edition_deck", pos = { x = 1, y = 1 } },
unik_steel = { atlas = "unik_edition_deck", pos = { x = 2, y = 1 } },
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/enhanced.lua"]'''
pattern = '''cry_flickering = { atlas = "cry_atlasdeck", pos = { x = 6, y = 2 } },'''
position = "after"
payload = '''
unik_depleted = { atlas = "unik_sticker_deck", pos = { x = 0, y = 0 } },
unik_disposable = { atlas = "unik_sticker_deck", pos = { x = 1, y = 0 } },
unik_niko = { atlas = "unik_sticker_deck", pos = { x = 2, y = 0 } },
unik_impounded = { atlas = "unik_sticker_deck", pos = { x = 0, y = 1 } },'''
match_indent = true

## Betmma real time shader method
# Send real time to fs file in draw_shader function.
[[patches]]
[patches.pattern]
target = "engine/sprite.lua"
pattern = '''G.SHADERS[_shader or 'dissolve']:send("shadow",(not not _shadow_height))'''
position = "after"
payload = '''
if _shader=='unik_corrupted' then
    G.SHADERS[_shader or 'dissolve']:send("real_time",G.TIMERS.REAL - (G.vortex_time or 0))
end
if _shader=='unik_fuzzy' then
    G.SHADERS[_shader or 'dissolve']:send("real_time",G.TIMERS.REAL - (G.vortex_time or 0))
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/card_draw.lua"]'''
pattern = '''if self.edition then'''
position = "before"
payload = '''
end
'''
match_indent = true
##Half edition: Do not draw the base floating soul sprite if an edition is applied and apply_to_float is true
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/card_draw.lua"]'''
pattern = '''if type(self.config.center.soul_pos.draw) == 'function' then'''
position = "before"
payload = '''
local edition_soul_sprite = false
if self.edition then 
    for k, v in pairs(G.P_CENTER_POOLS.Edition) do
        if v.apply_to_float and v.apply_to_float == true and self.edition[v.key:sub(3)] then
            edition_soul_sprite = true
        end
    end
end
if edition_soul_sprite == false then
'''
match_indent = true

### Prevent delay when applying a lot of editions at once.

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/overrides.lua"]'''
pattern = '''if self.edition and not silent then
		local ed = G.P_CENTERS['e_' .. (self.edition.type)]
		G.CONTROLLER.locks.edition = true
		G.E_MANAGER:add_event(Event({
			trigger = 'after',
			delay = not immediate and 0.2 or 0,
			blockable = not immediate,
			func = function()
				if self.edition then
					self:juice_up(1, 0.5)
					play_sound(ed.sound.sound, ed.sound.per, ed.sound.vol)
				end
				return true
			end
		}))
		G.E_MANAGER:add_event(Event({
			trigger = 'after',
			delay = 0.1,
			func = function()
				G.CONTROLLER.locks.edition = false
				return true
			end
		}))
	end'''
position = "at"
payload = '''
if self.edition and not silent and not G.GAME.force_bypass_edition_delay then
    local ed = G.P_CENTERS['e_' .. (self.edition.type)]
    G.CONTROLLER.locks.edition = true
    G.E_MANAGER:add_event(Event({
        trigger = 'after',
        delay = not immediate and 0.2 or 0,
        blockable = not immediate,
        func = function()
            if self.edition then
                self:juice_up(1, 0.5)
                play_sound(ed.sound.sound, ed.sound.per, ed.sound.vol)
            end
            return true
        end
    }))
    G.E_MANAGER:add_event(Event({
        trigger = 'after',
        delay = 0.1,
        func = function()
            G.CONTROLLER.locks.edition = false
            return true
        end
    }))
elseif self.edition and not silent and G.GAME.force_bypass_edition_delay  then
    
    local ed = G.P_CENTERS['e_' .. (self.edition.type)]
    if self.edition then
        self:juice_up(1, 0.5)
        play_sound(ed.sound.sound, ed.sound.per, ed.sound.vol)
    end

end
'''
match_indent = true

###Edeck backs

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/ui.lua"]'''
pattern = '''if currentBack.effect.center.edeck_type then'''
position = "before"
payload = '''
if currentBack.effect.center.edition_back_shader then
    self.children.back:draw_shader(currentBack.effect.center.edition_back_shader, nil, self.ARGS.send_to_shader, true)
end
'''
match_indent = true