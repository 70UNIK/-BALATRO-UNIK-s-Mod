[manifest]
version = "0.0.1"
dump_lua = true
priority = 999

###The box, striker, windmill, pin
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''if (card.area == G.jokers) and not G.GAME.blind.disabled and card.config.center.rarity == 1 then
			return true
		end'''
position = "at"
payload = '''
    if (card.area == G.jokers) and card:getLeftmostJokerType(1,nil) and not G.GAME.blind.disabled and card.config.center.rarity == 1 then
			return true
		end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''if (card.area == G.jokers) and not G.GAME.blind.disabled and card.config.center.rarity == 3 then
			return true
		end'''
position = "at"
payload = '''
    if (card.area == G.jokers) and card:getLeftmostJokerType(3,nil) and not G.GAME.blind.disabled and card.config.center.rarity == 3 then
			return true
		end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''if (card.area == G.jokers) and not G.GAME.blind.disabled and card.config.center.rarity == 2 then
			return true
		end'''
position = "at"
payload = '''
    if (card.area == G.jokers) and card:getLeftmostJokerType(2,nil) and not G.GAME.blind.disabled and card.config.center.rarity == 2 then
			return true
		end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''if
			(card.area == G.jokers)
			and not G.GAME.blind.disabled
			and (
				card.config.center.rarity == 4
				or card.config.center.rarity == "cry_epic"
				or card.config.center.rarity == "cry_exotic"
				or Cryptid.pin_debuff[card.config.center.rarity]
			)
		then
			return true
		end'''
position = "at"
payload = '''
local table222 = {4,"cry_epic","cry_exotic"}
for i,v in pairs(Cryptid.pin_debuff) do
    table222[#table222 + 1] = i
end
if
    (card.area == G.jokers)
    and not G.GAME.blind.disabled
    and card:getLeftmostJokerType(table222)
    and (
        card.config.center.rarity == 4
        or card.config.center.rarity == "cry_epic"
        or card.config.center.rarity == "cry_exotic"
        or Cryptid.pin_debuff[card.config.center.rarity]
    )
then
    return true
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''if
			(card.area == G.jokers)
			and not G.GAME.blind.disabled
			and Cryptid.safe_get(card, "edition", "negative") == true
		then
			return true
		end'''
position = "at"
payload = '''
    if
			(card.area == G.jokers)
			and not G.GAME.blind.disabled
            and card:getLeftmostJokerType(nil,"negative")
			and Cryptid.safe_get(card, "edition", "negative") == true
		then
			return true
		end
'''
match_indent = true


###Loc fixes for above
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''local box = {'''
position = "after"
payload = '''
    loc_vars = function(self, info_queue, card)
		return { key = "bl_cry_box_fixed"  }
	end,
	collection_loc_vars = function(self)
		return { key = "bl_cry_box_fixed" }
	end,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''local striker = {'''
position = "after"
payload = '''
    loc_vars = function(self, info_queue, card)
		return { key = "bl_cry_striker_fixed"  }
	end,
	collection_loc_vars = function(self)
		return { key = "bl_cry_striker_fixed" }
	end,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''local windmill = {'''
position = "after"
payload = '''
    loc_vars = function(self, info_queue, card)
		return { key = "bl_cry_windmill_fixed"  }
	end,
	collection_loc_vars = function(self)
		return { key = "bl_cry_windmill_fixed" }
	end,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''local pin = {'''
position = "after"
payload = '''
    loc_vars = function(self, info_queue, card)
		return { key = "bl_cry_pin_fixed"  }
	end,
	collection_loc_vars = function(self)
		return { key = "bl_cry_pin_fixed" }
	end,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''local shackle = {'''
position = "after"
payload = '''
    loc_vars = function(self, info_queue, card)
		return { key = "bl_cry_shackle_fixed"  }
	end,
	collection_loc_vars = function(self)
		return { key = "bl_cry_shackle_fixed" }
	end,
'''
match_indent = true

###Landlord. Fuck rental.

###Lavender Loop reduce size
[[patches]]
[patches.regex]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''1\.25'''
position = "at"
line_prepend = '$indent'
payload = '''
    1.1
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''local lavender_loop = {'''
position = "after"
payload = '''
    loc_vars = function(self, info_queue, card)
		return { key = "bl_cry_lavender_loop_fixed"  }
	end,
	collection_loc_vars = function(self)
		return { key = "bl_cry_lavender_loop_fixed" }
	end,
'''
match_indent = true

###tornado disabled
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''local tornado = {'''
position = "after"
payload = '''
    gameset_config = {
		modest = { disabled = true},
        mainline = {disabled = true},
	},
'''
match_indent = true

### tax
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''return math.floor(math.min(0.4 * G.GAME.blind.chips, score) + 0.5)'''
position = "at"
payload = '''
    return math.floor(math.min(0.8 * G.GAME.blind.chips, score) + 0.5)
'''
match_indent = true
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''return { vars = { 0.4 * get_blind_amount(G.GAME.round_resets.ante) * 2 * G.GAME.starting_params.ante_scaling } } -- no bignum?'''
position = "at"
payload = '''
    return { vars = { 0.8 * get_blind_amount(G.GAME.round_resets.ante) * 2 * G.GAME.starting_params.ante_scaling } } -- no bignum?
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''return { vars = { localize("cry_tax_placeholder") } }'''
position = "at"
payload = '''
return { vars = { localize("cry_tax_placeholder_fixed") } }
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''debuff_hand = function(self, cards, hand, handname, check)
		G.GAME.blind.triggered = false
		local jokers = {}
		for i, v in pairs(G.jokers.cards) do
			if not v.ability.rental then
				jokers[#jokers + 1] = v
			end
		end
		if #jokers > 0 then
			G.GAME.blind.triggered = true
			if not check then
				local joker = pseudorandom_element(jokers, pseudoseed("cry_landlord"))
				joker:set_rental(true)
				joker:juice_up()
				G.GAME.blind:wiggle()
			end
		end
	end,'''
position = "at"
payload = '''
loc_vars = function(self, info_queue, card)
	return { key = "bl_cry_landlord_fixed"  }
end,
collection_loc_vars = function(self)
	return { key = "bl_cry_landlord_fixed" }
end,
press_play = function(self)
	G.E_MANAGER:add_event(Event({
		trigger = "after",
		delay = 0.2,
		func = function()
			for i = 1, #G.jokers.cards do
				G.E_MANAGER:add_event(Event({
					func = function()
						G.jokers.cards[i]:juice_up()
						return true
					end,
				}))
				ease_dollars(-1)
				delay(0.23)
			end
			return true
		end,
	}))
	G.GAME.blind:wiggle()
	G.GAME.blind.triggered = true
end,
'''
match_indent = true


###Chromatic rework
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''cry_modify_score = function(self, score)
		if math.floor(G.GAME.current_round.hands_played + 1) % 2 == 1 then
			return score * -1
		else
			return score
		end
	end,'''
position = "at"
payload = '''
    loc_vars = function(self, info_queue, card)
		return { key = "bl_cry_chromatic_fixed"  }
	end,
	collection_loc_vars = function(self)
		return { key = "bl_cry_chromatic_fixed" }
	end,
    debuff_hand = function(self, cards, hand, handname, check)
        if check and G.GAME.current_round.hands_played == 0 then
            return true
        end
        return false
    end,
    unik_debuff_after_hand = function(self,poker_hands, scoring_hand,cards, check,sum)
		if G.GAME.current_round.hands_played == 0 then
			return {
                debuff = true,
                add_to_blind = sum,
            }
		else
			return {
            debuff = false,
        }
		end
    end,
'''
match_indent = true


###Vermillion virus rework
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''unik_before_play = function(self)
		local eligible_cards = {}
		local idx
		--Check for eligible cards (not eternal and not immune)
		for i = 1, #G.jokers.cards do
			if not G.jokers.cards[i].config.center.immune_to_vermillion and not SMODS.is_eternal(G.jokers.cards[i]) then
				eligible_cards[#eligible_cards + 1] = G.jokers.cards[i]
			end
		end
		if #eligible_cards ~= 0 then
			--Choose 1 eligible card and get the position of it
			local option = pseudorandom_element(eligible_cards, pseudoseed("cry_vermillion_virus"))
			for i = 1, #G.jokers.cards do
				if G.jokers.cards[i] == option then
					idx = i
					break
				end
			end
			if idx and G.jokers.cards[idx] then
				_card = create_card("Joker", G.jokers, nil, nil, nil, nil, nil, "cry_vermillion_virus_gen")
				G.jokers.cards[idx]:start_dissolve()
				--G.jokers.cards[idx]:remove_from_deck()
				_card:add_to_deck()
				_card:start_materialize()
				G.jokers.cards[idx] = _card
				_card:set_card_area(G.jokers)
				G.jokers:set_ranks()
				G.jokers:align_cards()
			end
		end
	end,'''
position = "at"
payload = '''
    loc_vars = function(self, info_queue, card)
		return { key = "bl_cry_vermillion_virus_fixed"  }
	end,
	collection_loc_vars = function(self)
		return { key = "bl_cry_vermillion_virus_fixed" }
	end,
    set_blind = function(self, reset, silent)
		G.GAME.unik_vermillion_mover = 1
	end,
	disable = function(self)
		G.GAME.unik_vermillion_mover = nil
    end,
    defeat = function(self)
		G.GAME.unik_vermillion_mover = nil
	end,
	unik_before_play = function(self)
		-- local eligible_cards = {}
		local idx
		--Check for eligible cards (not eternal and not immune)
		local carder = nil
		-- for i = 1, #G.jokers.cards do
		if G.GAME.unik_vermillion_mover > #G.jokers.cards then
			G.GAME.unik_vermillion_mover = 1
		end
		if #G.jokers.cards > 0 and not G.jokers.cards[G.GAME.unik_vermillion_mover].config.center.immune_to_vermillion and not G.jokers.cards[G.GAME.unik_vermillion_mover].ability.eternal then
			carder = G.jokers.cards[G.GAME.unik_vermillion_mover]
		end
		-- end
        if G.GAME.unik_vermillion_mover and G.jokers.cards[G.GAME.unik_vermillion_mover] then
            _card = create_card("Joker", G.jokers, nil, nil, nil, nil, nil, "cry_vermillion_virus_gen")
            G.jokers.cards[G.GAME.unik_vermillion_mover]:start_dissolve()
            --G.jokers.cards[G.GAME.unik_vermillion_mover]:remove_from_deck()
            _card:add_to_deck()
            _card:start_materialize()
            G.jokers.cards[G.GAME.unik_vermillion_mover] = _card
            _card:set_card_area(G.jokers)
            G.jokers:set_ranks()
            G.jokers:align_cards()
            G.GAME.blind.triggered = true
        	G.GAME.blind:wiggle()
        end
			
		G.GAME.unik_vermillion_mover = G.GAME.unik_vermillion_mover + 1
		if G.GAME.unik_vermillion_mover > #G.jokers.cards then
			G.GAME.unik_vermillion_mover = 1
		end
	end,
'''
match_indent = true

###Disable some nostalgic blinds.
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''local oldarm = {'''
position = "after"
payload = '''
    gameset_config = {
		modest = { disabled = true},
        mainline = {disabled = true},
	},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''local oldhouse = {'''
position = "after"
payload = '''
    gameset_config = {
		modest = { disabled = true},
        mainline = {disabled = true},
	},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''local oldpillar = {'''
position = "after"
payload = '''
    gameset_config = {
		modest = { disabled = true},
        mainline = {disabled = true},
	},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''local oldflint = {'''
position = "after"
payload = '''
    gameset_config = {
		modest = { disabled = true},
        mainline = {disabled = true},
	},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "items/blind.lua"]'''
pattern = '''local oldmark = {'''
position = "after"
payload = '''
    gameset_config = {
		modest = { disabled = true},
        mainline = {disabled = true},
	},
'''
match_indent = true













	