[manifest]
version = "0.0.1"
dump_lua = true
priority = 999

### Epic Decision and Lartceps


### Brethren Moon: Force text to be red
[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''if to_big(delta) < to_big(0) then delta = number_format(delta); col = G.C.RED'''
position = "at"
payload = '''
local forceRed = nil
if vals.forceRed then
    forceRed = true
end
--For when you have black holes that subtract all levels. or eldritch shit that destroy your hand levels.
if forceRed then
col = G.C.RED
elseif to_big(delta) < to_big(0) then delta = number_format(delta); col = G.C.RED
'''
match_indent = true

### Force selling prices to be -666 for lartceps
[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/overrides.lua"]'''
pattern = '''if self.ability.set == "Voucher" and G.GAME.modifiers.cry_voucher_price_hike then'''
position = "before"
payload = '''
if self.ability.set == "unik_lartceps" then
    self.sell_cost = -666
    self.sell_cost_label = -666
end
'''
match_indent = true

###shader
[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''if self.ability.set == 'Booster' or self.ability.set == 'Spectral' then'''
position = "before"
payload = '''
if self.ability.set == 'unik_lartceps' then
    self.children.center:draw_shader('negative_shine', nil, self.ARGS.send_to_shader)
end
'''
match_indent = true

## Cryptid baneful buffon compat
[[patches]]
[patches.pattern]
target = '''functions/button_callbacks.lua'''
pattern = '''if G.GAME.cry_make_a_decision then
                  G.GAME.cry_make_a_decision = nil
                  G.STATE = G.STATES.ROUND_EVAL
                  G.STATE_COMPLETE = false'''
position = "after"
payload = '''
      elseif G.GAME.unik_mortons_fork then
            G.GAME.unik_halt_round = nil
            G.GAME.cry_fastened = nil
            new_round()

'''
match_indent = true

## Do not trigger booster pack tags after ending the baneful pack, otherwise it will be awkward
[[patches]]
[patches.pattern]
target = '''functions/button_callbacks.lua'''
pattern = '''if G.GAME.tags[i]:apply_to_run({type = 'new_blind_choice'}) then break end'''
position = "before"
payload = '''
	if not G.GAME.unik_mortons_fork then
'''
match_indent = true
[[patches]]
[patches.pattern]
target = '''functions/button_callbacks.lua'''
pattern = '''if G.GAME.tags[i]:apply_to_run({type = 'new_blind_choice'}) then break end'''
position = "after"
payload = '''
	end
'''
match_indent = true


##Part 1 of below:
[[patches]]
[patches.pattern]
target = '''functions/misc_functions.lua'''
pattern = '''--Control the music here'''
position = "before"
payload = '''
local disable_booster_music = false
local obj = SMODS.OPENED_BOOSTER
if obj and obj.config and obj.config.center and obj.config.center.no_music then
	disable_booster_music = true
end
'''
match_indent = true

## Force music to be Boss Blind music while in baneful pack
[[patches]]
[patches.pattern]
target = '''functions/misc_functions.lua'''
pattern = '''(G.booster_pack and not G.booster_pack.REMOVED and 'music2') or'''
position = "at"
payload = '''(G.booster_pack and not G.booster_pack.REMOVED and not disable_booster_music and 'music2') or'''
match_indent = true

### Part 1 of hardcoding: If mortons fork is present, skip drawing cards
[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''G.E_MANAGER:add_event(Event({
                trigger = 'immediate',
                func = function()
                    G.STATE = G.STATES.DRAW_TO_HAND'''
position = "before"
payload = '''if not G.GAME.unik_mortons_fork then'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''                    G.deck:hard_set_T()
                    G.STATE_COMPLETE = false
                    return true
                end
            }))'''
position = "after"
payload = '''end'''
match_indent = true


### antifrustriation feature of booster
[[patches]]
[patches.pattern]
target = '''functions/button_callbacks.lua'''
pattern = '''G.GAME.pack_choices = G.GAME.pack_choices - 1'''
position = "after"
payload = '''
G.GAME.lartceps_pack_pity = G.GAME.lartceps_pack_pity or 0
G.GAME.lartceps_pack_pity = G.GAME.lartceps_pack_pity + 1
'''
match_indent = true
