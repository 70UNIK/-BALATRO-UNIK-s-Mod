[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# do not
### Copied from Golden Crown code, minus the deck reset
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.FUNCS.draw_from_hand_to_discard()"
position = "before"
payload = '''
if not (G.GAME.unik_crown_progress and G.GAME.unik_crown_progress > 1) then
'''
match_indent = true

###Copied from golden crown, the main bulk of the function. Minus drawing from deck

# end wrap
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
            end
        return true
      end
    }))
  end
  
function new_round()
'''
position = "before"
payload = '''
else
	delay(0.8)
	local function _reset()
		G.GAME.chips = 0
		G.GAME.current_round.hands_left = 1
		G.GAME.unik_crown_progress = G.GAME.unik_crown_progress - 1
        G.GAME.blind.chips = G.GAME.round_scores['hand'].amt*1.5
        G.GAME.blind.chip_text = number_format(G.GAME.blind.chips)
        G.HUD_blind:recalculate(true)
		G.GAME.blind:set_text()
        G.GAME.blind.triggered = true
        G.GAME.blind:wiggle()
	end
	G.E_MANAGER:add_event(Event({
		trigger = 'immediate',
		func = function()
			G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.06*G.SETTINGS.GAMESPEED, blockable = false, blocking = false, func = function()
				play_sound('tarot2', 0.76, 0.4);_reset();return true end}))
			play_sound('tarot2', 1, 0.4)
			return true
		end
	}))
	delay(0.8)

	G.GAME.blind:alert_debuff(true)
	if (G.GAME.modifiers.ccc_bside and G.GAME.modifiers.ccc_bside >= 1) then
		G.GAME.ccc_bonus_blind:alert_debuff(true)
	end
	SMODS.calculate_context({setting_blind = true, blind = G.GAME.round_resets.blind})
    -- TARGET: setting_blind effects
	delay(0.4)
	G.E_MANAGER:add_event(Event({
		trigger = 'immediate',
		func = function()
			G.STATE = G.STATES.DRAW_TO_HAND

			G.STATE_COMPLETE = false
			return true
		end
	}))
end
'''
match_indent = true


# end wrap
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
if game_over then
'''
position = "before"
payload = '''
if (G.GAME.unik_crown_progress and G.GAME.unik_crown_progress > 1) then
	game_won = false
	G.GAME.won = false
end
'''
match_indent = true

