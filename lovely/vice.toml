[manifest]
version = "0.0.1"
dump_lua = true
priority = 999

# in_pool fix: enable bosses that have in_pool to spawn when finishers are enabled or the vice causes them to spawn everywhere
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if
                (
                    ((G.GAME.round_resets.ante)%G.GAME.win_ante == 0 and G.GAME.round_resets.ante >= 2) ==
                    (v.boss.showdown or false)
                ) or
                (options or {}).ignore_showdown_check
            then'''
position = "at"
payload = '''
if G.GAME.OvershootFXVal and G.GAME.OvershootFXVal >= 5 then
    G.GAME.unik_force_epic_plus = math.max(1,G.GAME.unik_force_epic_plus)
end
            if
                (
                    ((G.GAME.round_resets.ante)%(G.GAME.modifiers.cry_big_showdown or G.GAME.win_ante) == 0 and G.GAME.round_resets.ante >= 2) ==
                    (v.boss.showdown or false)
                ) or
                (options or {}).ignore_showdown_check
            then
'''
match_indent = true

## vice's fx: make showdown blinds appear twice as frequent
[[patches]]
[patches.regex]
target = 'functions/common_events.lua'
pattern = '''G.GAME.win_ante'''
position = 'at'
line_prepend = '$indent'
payload = ''' vice_check() '''

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''end
    for k, v in pairs(G.GAME.banned_keys) do
        if eligible_bosses[k] then eligible_bosses[k] = nil end
    end'''
position = 'before'
payload = '''
if G.GAME.unik_force_epic_plus > 0 then
    if unik_config.unik_legendary_blinds and Cryptid.gameset() ~= "modest" then
        if v.boss and v.boss.epic and string.sub(k,1,6) == "bl_jen" then
            eligible_bosses[k] = true
        elseif v.boss and (v.boss.epic or v.boss.legendary) then
            if v.in_pool then
                local res, options = v:in_pool()
                eligible_bosses[k] = res and true or nil
            else
                eligible_bosses[k] = true
            end
        elseif v.boss then
            eligible_bosses[k] = nil
        end
    else
    --fallback to finisher blinds if epic blinds are disabled or jens not installed
        if v.boss and v.boss.showdown then
            if v.in_pool then
                local res, options = v:in_pool()
                eligible_bosses[k] = res and true or nil
            else    
                eligible_bosses[k] = true
            end
        elseif v.boss then
            eligible_bosses[k] = nil
        end
    end
end

'''
match_indent = true

# If the next boss is epic+, decrement
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''return boss'''
position = "before"
payload = '''
if unik_config.unik_legendary_blinds and Cryptid.gameset() ~= "modest" then
    if (G.P_BLINDS[boss].boss and (G.P_BLINDS[boss].boss.epic or G.P_BLINDS[boss].boss.legendary)) and G.GAME.unik_force_epic_plus and G.GAME.unik_force_epic_plus > 0 then
        G.GAME.unik_force_epic_plus = G.GAME.unik_force_epic_plus - 1
    end
else
    if (G.P_BLINDS[boss].boss and (G.P_BLINDS[boss].boss.showdown)) and G.GAME.unik_force_epic_plus and G.GAME.unik_force_epic_plus > 0 then
        G.GAME.unik_force_epic_plus = G.GAME.unik_force_epic_plus - 1
    end
end
if G.GAME.OvershootFXVal and G.GAME.OvershootFXVal >= 5 then
    G.GAME.unik_force_epic_plus = math.max(1,G.GAME.unik_force_epic_plus)
end
'''
match_indent = true

# UUntil no more blinds are left, force the next X blinds to be epic+
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''self.GAME.round_resets.blind_choices.Boss = get_new_boss()'''
position = "before"
payload = '''
if G.GAME.OvershootFXVal and G.GAME.OvershootFXVal >= 5 then
    G.GAME.unik_force_epic_plus = math.max(1,G.GAME.unik_force_epic_plus)
end
if G.GAME.unik_force_epic_plus > 0 then
    self.GAME.round_resets.blind_choices.Small = get_new_boss()
else
    self.GAME.round_resets.blind_choices.Small = "bl_small"
end
if G.GAME.unik_force_epic_plus > 0 then
    self.GAME.round_resets.blind_choices.Big = get_new_boss()
else
    self.GAME.round_resets.blind_choices.Big = "bl_big"
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if G.GAME.round_resets.blind_states.Boss == 'Defeated' then'''
position = "after"
payload = '''
if G.GAME.OvershootFXVal and G.GAME.OvershootFXVal >= 5 then
    G.GAME.unik_force_epic_plus = math.max(1,G.GAME.unik_force_epic_plus)
end
if G.GAME.unik_force_epic_plus > 0 then
    G.GAME.round_resets.blind_choices.Small = get_new_boss()
else
    G.GAME.round_resets.blind_choices.Small = "bl_small"
end
if G.GAME.unik_force_epic_plus > 0 then
    G.GAME.round_resets.blind_choices.Big = get_new_boss()
else
    G.GAME.round_resets.blind_choices.Big = "bl_big"
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.round_resets.ante == G.GAME.win_ante and G.GAME.blind:get_type() == 'Boss' then"
position = "at"
payload = "if G.GAME.round_resets.ante >= G.GAME.win_ante and G.GAME.blind_on_deck == 'Boss' then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.blind:get_type() == 'Boss' then"
position = "at"
payload = "if G.GAME.blind_on_deck == 'Boss' then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "elseif G.GAME.round_resets.blind == G.P_BLINDS.bl_big then"
position = "at"
payload = "elseif G.GAME.blind_on_deck == 'Big' then"
match_indent = true