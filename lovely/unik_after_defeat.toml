[manifest]
version = "0.0.1"
dump_lua = true
priority = 9999

### legendary nuke - Trigger player death - AFTER cryptid
### Also includes green goalpost functionality;

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.blind.in_blind = false'''
position = 'before'
payload = '''
local instakill = G.GAME.blind:unik_after_defeat(G.GAME.chips,G.GAME.blind.chips)
if instakill then
    G.GAME.chips = 0
    game_over = true
    G.ROOM.jiggle = G.ROOM.jiggle + 25
    G.GAME.blind.triggered = true
    G.GAME.blind:wiggle()
end
-- legendary crown: force set new high score:
G.GAME.round_scores['hand'].amt = G.GAME.chips
-- scores really big for regular indigo icbm, epic and legendary blinds. Can only spawn if you scored over ^2 reqs consecutively
local upper22 = G.GAME.chips
local ceiling22 = G.GAME.blind.chips^2
local ceiling222 = G.GAME.blind.chips^2.6
--print(upper22)
--print(ceiling22)
if to_big(upper22) > to_big(ceiling22) then
     G.GAME.unik_scores_really_big = G.GAME.unik_scores_really_big + 1
else
    G.GAME.unik_scores_really_big = 0
end
if to_big(upper22) > to_big(ceiling222) then
    G.GAME.unik_scores_really_big_back = G.GAME.unik_scores_really_big_back or 0
    G.GAME.unik_scores_really_big_back = G.GAME.unik_scores_really_big_back + 1
else
    G.GAME.unik_scores_really_big_back = G.GAME.unik_scores_really_big_back or 0
    G.GAME.unik_scores_really_big_back = 0
end
--print(G.GAME.unik_scores_really_big)
'''
match_indent = true

### Green goalpost: reset ante victory reqs after victory:
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.win_notified = true'''
position = 'before'
payload = '''

    ease_victory_reqs(-G.GAME.unik_goalpost_ante_win_increase)
    G.GAME.unik_goalpost_ante_win_increase = 0
'''
match_indent = true
### Custom boss blind death messages

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''Jimbo:add_speech_bubble('lq_'..math.random(1,10), nil, {quip = true})'''
position = 'at'
payload = '''
if G.GAME.blind and G.GAME.blind.death_message and not G.GAME.blind.disabled then
    Jimbo:add_speech_bubble(G.GAME.blind.death_message, nil, {quip = true})
elseif G.GAME.unik_killed_by_nuke_legendary then
    Jimbo:add_speech_bubble('special_lose_unik_nuke_legendary', nil, {quip = true})
    G.GAME.unik_killed_by_nuke_legendary = nil
    G.GAME.unik_nuke_activate = nil
elseif G.GAME.unik_killed_by_legendary_vessel then
    Jimbo:add_speech_bubble('special_lose_unik_vessel_legendary', nil, {quip = true})
    G.GAME.unik_killed_by_legendary_vessel = nil
elseif G.GAME.unik_killed_by_pentagram then
    Jimbo:add_speech_bubble('special_lose_unik_killed_by_pentagram', nil, {quip = true})
    G.GAME.unik_killed_by_pentagram = nil
    G.GAME.unik_pentagram_manager_fix = nil
elseif G.GAME.unik_killed_by_placard then
    Jimbo:add_speech_bubble('special_lose_unik_killed_by_placard', nil, {quip = true})
    G.GAME.unik_killed_by_placard = nil
elseif G.GAME.unik_killed_by_joyless then
    Jimbo:add_speech_bubble('special_lose_unik_jollyless', nil, {quip = true})
    G.GAME.unik_killed_by_joyless = nil
elseif G.GAME.unik_eaten_by_lily then
    Jimbo:add_speech_bubble('special_lose_unik_sprunki_lily', nil, {quip = true})
    G.GAME.unik_eaten_by_lily = nil
elseif G.GAME.unik_killed_by_poppy then
    Jimbo:add_speech_bubble('special_lose_unik_tall_poppy_syndrome', nil, {quip = true})
    G.GAME.unik_killed_by_poppy = nil
    G.GAME.unik_poppy_ceil = nil
elseif G.GAME.unik_killed_by_boo then
    Jimbo:add_speech_bubble('special_lose_unik_bigger_boo', nil, {quip = true})
    G.GAME.unik_killed_by_boo = nil
    G.GAME.unik_pentagram_manager_fix = nil
elseif G.GAME.unik_killed_by_leak then
    Jimbo:add_speech_bubble('special_lose_unik_the_leak', nil, {quip = true})
    G.GAME.unik_killed_by_leak = nil
elseif G.GAME.unik_killed_by_artisan_builds then
    Jimbo:add_speech_bubble('special_lose_unik_artisan_builds', nil, {quip = true})
    G.GAME.unik_killed_by_artisan_builds = nil
elseif G.GAME.unik_killed_by_magnet then
    Jimbo:add_speech_bubble('special_lose_unik_magnet', nil, {quip = true})
    G.GAME.unik_killed_by_magnet = nil
    G.GAME.unik_deathly_debuff_text = nil
elseif G.GAME.unik_killed_by_racket then
    Jimbo:add_speech_bubble('special_lose_unik_racket', nil, {quip = true})
    G.GAME.unik_killed_by_racket = nil
elseif G.GAME.unik_killed_by_video_poker then
    Jimbo:add_speech_bubble('special_lose_unik_video_poker', nil, {quip = true})
    G.GAME.unik_killed_by_video_poker = nil
    G.GAME.unik_video_poker_rules = nil
elseif G.GAME.unik_killed_by_magnet_legendary then
    Jimbo:add_speech_bubble('special_lose_unik_magnet_legendary', nil, {quip = true})
    G.GAME.unik_killed_by_magnet_legendary = nil
        G.GAME.unik_pentagram_manager_fix = nil
         G.GAME.unik_deathly_debuff_text = nil
elseif G.GAME.unik_killed_by_sword_legendary then
    Jimbo:add_speech_bubble('special_lose_unik_sword_legendary', nil, {quip = true})
    G.GAME.unik_killed_by_sword_legendary = nil
elseif G.GAME.unik_killed_by_tornado_legendary then
    Jimbo:add_speech_bubble('special_lose_unik_tornado_legendary', nil, {quip = true})
    G.GAME.unik_killed_by_tornado_legendary = nil
    G.GAME.unik_deathly_debuff_text = nil
elseif G.GAME.unik_killed_by_rot then
    Jimbo:add_speech_bubble('special_lose_unik_red_rot', nil, {quip = true})
    G.GAME.unik_killed_by_rot = nil
        G.GAME.unik_pentagram_manager_fix = nil
elseif G.GAME.unik_killed_by_bigger_blind then
    Jimbo:add_speech_bubble('special_lose_bigger_blind', nil, {quip = true})
    G.GAME.unik_killed_by_bigger_blind = nil
elseif G.GAME.unik_killed_by_artisan_builds_epic then
    Jimbo:add_speech_bubble('special_lose_unik_artisan_builds_epic', nil, {quip = true})
    G.GAME.unik_killed_by_artisan_builds = nil
else
    Jimbo:add_speech_bubble('lq_'..math.random(1,10), nil, {quip = true})
    G.GAME.unik_deathly_debuff_text = nil
end
G.GAME.unik_prevent_killing_cursed_jokers2 = nil
G.GAME.unik_deathly_debuff_text = nil
'''
match_indent = true

### Set blind sizes to be different if jen is installed; legendary blinds
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if G.GAME.round_resets.ante <= G.GAME.win_ante then --Only add Jimbo to say a quip if the game over happens when the run is lost'''
position = 'at'
payload = '''
if G.GAME.round_resets.ante <= G.GAME.win_ante or ( G.GAME.blind and G.GAME.blind.death_message and not G.GAME.blind.disabled) then --Only add Jimbo to say a quip if the game over happens when the run is lost
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''function Blind:load(blindTable)'''
position = 'after'
payload = '''
self.death_message = blindTable.death_message or nil
'''
match_indent = true

### Set blind sizes to be different if jen is installed; legendary blinds
