--Almanac + Buffoonery Exclusive
--Can only be generated by "Kosmos' Tea"
--- Only obtained by godsmarbling Dorkshire Tea; Kosmos' Tea turns all scored cards into tainted ceramic.
-- ^^^^^^1.01 Chips, 4 in 6 chance to self destruct, guaranteed chance if not played with exactly 6 scoring cards or is unscoring, numerator cannot go below 3.
-- immutable
SMODS.Enhancement {  -- 
dependencies = {
    mods = {
      "jen", 
      "Buffoonery",
    }
},
	key = "unik_buf_jen_tainted_ceramic",
	atlas = "placeholders2",
	pos = {x=0, y = 0},
	
    replace_base_card = false,
    no_suit = false,
    no_rank = false,
    always_scores = false,
	immutable = true,
	config = {extra = {eeechips = 1.06, exact = 6, played = 0, marked = false, odds = 6}},
	in_pool = function(self)
		return false
    end,
	loc_vars = function(self, info_queue, card)
        return {
            vars = { card.ability.extra.eeechips, 
            card and math.max(cry_prob(4 or math.max(3,4 or card.ability.cry_prob*4),math.min(card.ability.extra.odds,6),card.ability.cry_rigged),3)or 4, 
            math.min(card.ability.extra.odds,6),
            
            card.ability.extra.exact}
        }
    end,
	
	calculate = function(self, card, context, ret)
        card.ability.extra.exact = 6
		if context.cardarea == G.play and context.main_scoring then
			card.ability.extra.played = #context.full_hand
            card.ability.extra.exact = 6
			if card.ability.extra.played ~= card.ability.extra.exact or 
            pseudorandom('unik_bu_jen_ceramic_break') < math.max(cry_prob(4 or math.max(3,4 or card.ability.cry_prob*4),math.min(card.ability.extra.odds,6),card.ability.cry_rigged),3)/math.min(card.ability.extra.odds,6)
            then -- the 'card.area' part makes sure the card has a chance to survive if in the play area
				card.ability.extra.marked = true
			end
            G.E_MANAGER:add_event(Event({
                trigger='after',
                delay=0.2,
                func = function()
                    card:juice_up(1.5, 1.5)
                    G.ROOM.jiggle = G.ROOM.jiggle + 5
                        return true
                    end
                }))
			return {
                message = localize({
					type = "variable",
					key = "a_hyper_three_chips",
					vars = { number_format(to_big(card.ability.extra.eeechips)) },
				}),
				colour = G.C.UNIK_VOID_COLOR,
				card = card,
				EEEchip_mod = card.ability.extra.eeechips,

			}
		end

        --always destroy unscoring or held cards
        if (context.cardarea == "unscored" or (context.cardarea == G.hand and context.main_scoring and not (context.cardarea == G.play))) then
            card.ability.extra.marked = true
            if context.destroy_card then
                G.E_MANAGER:add_event(Event({
                    trigger = 'immediate',
                    func = function()
                        card:juice_up(0.9, 0.9)
                        card:shatter()
                        return true 
                    end 
                }))
            end
        end
		
		if context.final_scoring_step and card.ability.extra.marked then
			G.E_MANAGER:add_event(Event({
				trigger = 'immediate',
				func = function()
                    card:juice_up(0.9, 0.9)
					card:shatter()
					return true 
				end 
			}))
		end
		
		if context.destroying_card and card.ability.extra.marked then
			return {
				remove = true
			}
		end
	end
    
}
